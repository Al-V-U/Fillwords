local monarch = require "monarch.monarch"
local transitions = require "monarch.transitions.gui"
local druid = require "druid.druid"
local druid_const = require("druid.const")
local druid_style = require("scripts.modules.druid_style")
local game_fsm = require("scripts.modules.game_logic.game_fsm")
local profile_service = require("scripts.modules.profile_service")
local const = require("scripts.modules.data.const")
local cfg = require("scripts.modules.data.cfg")

local function on_cheat_win_btn_click()
    print "cheat win"
    profile_service.finish_level()
    monarch.replace(const.SCREENS.WIN_SCREEN)
end

local function on_reset_counter_btn_click()
    profile_service.reset_found_words_counter()
end

function init(self)
    msg.post(".", "acquire_input_focus")
    self.druid = druid.new(self)

    game_fsm.init(self)
    gui.set_text(gui.get_node("level_num_text"), "УРОВЕНЬ " .. profile_service.get_level_num())

    local cheat_btn = self.druid:new_button("cheat_win_btn", on_cheat_win_btn_click)
    cheat_btn:set_style(druid_style)

    local reset_btn = self.druid:new_button("reset_counter_btn", on_reset_counter_btn_click)
    reset_btn:set_style(druid_style)

    self.texts = {
        self.druid:new_text("cheat_win_text", nil, druid_const.TEXT_ADJUST.DOWNSCALE),
        self.druid:new_text("level_num_text", nil, druid_const.TEXT_ADJUST.DOWNSCALE),
        self.druid:new_text("reset_counter_text", nil, druid_const.TEXT_ADJUST.DOWNSCALE),
        self.druid:new_text("found_words_counter_text", nil, druid_const.TEXT_ADJUST.DOWNSCALE),
    }

    local transition = transitions.fade_in_out(gui.get_node("root"), 0.2, 0)
    monarch.on_transition("game_screen", transition)
end

function final(self)
    self.druid:final()
end

function update(self, dt)
    self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
    if message_id == const.MSG_LAYOUT_CHANGED then
        cfg.is_portrait = message.id == const.MSG_ID_PORTRAIT and true or false
        game_fsm.layout_changed()
    end
    self.druid:on_message(message_id, message, sender)
    monarch.on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
    return game_fsm.input(self, action_id, action)
end